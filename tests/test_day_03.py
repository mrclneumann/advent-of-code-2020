from aoc.day_03 import Grid, path_generator, num_trees, read_puzzle, part_01, part_02


def test_grid():
    grid = Grid([".#.", "..#"])

    assert grid[0, 0] == "."
    assert grid[1, 1] == "."
    assert grid[0, 3] == "."
    assert grid[1, 3] == "."


def test_path():
    p = path_generator(dx=3, dy=1, limit=3)

    assert next(p) == (0, 0)
    assert next(p) == (1, 3)
    assert next(p) == (2, 6)


def test_path_length():
    p = path_generator(dx=3, dy=1, limit=30)

    assert len(list(p)) == 30


def test_num_trees():
    grid = Grid(
        [
            "..##.........##.........##.........##.........##.........##.......",
            "#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..",
            ".#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.",
            "..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#",
            ".#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.",
            "..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....",
            ".#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#",
            ".#........#.#........#.#........#.#........#.#........#.#........#",
            "#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...",
            "#...##....##...##....##...##....##...##....##...##....##...##....#",
            ".#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#",
        ]
    )
    p = path_generator(3, 1, grid.height)

    assert num_trees(grid, p) == 7


def test_solutions():
    puzzle = read_puzzle("../input/input_03.txt")

    assert part_01(puzzle) == 218
    assert part_02(puzzle) == 3847183340
