import numpy as np
import pytest

from advent.day_11 import (
    read_input,
    next_generation_1,
    next_generation_2,
)


@pytest.fixture()
def input_path(tmp_path):
    p = tmp_path / "input.txt"

    p.write_text("\n".join(["L.#", "...", ".#L"]))

    return p


def test_read_input(input_path):
    with input_path.open() as f:
        np.testing.assert_array_equal(
            read_input(f),
            np.array([["L", ".", "#"], [".", ".", "."], [".", "#", "L"]]),
        )


def test_next_generation_1():
    grid = np.array([["L", ".", "#"], [".", ".", "."], [".", "#", "L"]])

    next_grid = np.array(
        [
            ["#", ".", "#"],
            [".", ".", "."],
            [".", "#", "L"],
        ]
    )
    np.testing.assert_array_equal(
        next_generation_1(grid),
        next_grid,
    )


def test_next_generation_2_with_empty_seats():
    grid = np.array(
        [
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
        ]
    )

    next_grid = np.array(
        [
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
            ["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
            ["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
            [".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
        ]
    )

    np.testing.assert_array_equal(next_generation_2(grid), next_grid)


def test_next_generation_2_with_occupied_seats():
    grid = np.array(
        [
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", "#", "#", "#", "#", "#", "#", ".", "#", "#"],
            ["#", ".", "#", ".", "#", ".", ".", "#", ".", "."],
            ["#", "#", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", ".", "#", "#", ".", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
            [".", ".", "#", ".", "#", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", "#", "#", "#", "#", "#", "#", ".", "#"],
            ["#", ".", "#", "#", "#", "#", "#", ".", "#", "#"],
        ]
    )

    next_grid = np.array(
        [
            ["#", ".", "L", "L", ".", "L", "L", ".", "L", "#"],
            ["#", "L", "L", "L", "L", "L", "L", ".", "L", "L"],
            ["L", ".", "L", ".", "L", ".", ".", "L", ".", "."],
            ["L", "L", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", ".", "L", "L", ".", "L", "L"],
            ["L", ".", "L", "L", "L", "L", "L", ".", "L", "L"],
            [".", ".", "L", ".", "L", ".", ".", ".", ".", "."],
            ["L", "L", "L", "L", "L", "L", "L", "L", "L", "#"],
            ["#", ".", "L", "L", "L", "L", "L", "L", ".", "L"],
            ["#", ".", "L", "L", "L", "L", "L", ".", "L", "#"],
        ]
    )

    np.testing.assert_array_equal(next_generation_2(grid), next_grid)
